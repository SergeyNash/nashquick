import pandas as pd
import numpy as np 
frame = pd.read_csv('test5.csv', sep=';', encoding='cp1251')
DF = frame.dropna(subset=['phase']) 

frame.fillna('temp', inplace=True)
data4 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
data3 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
data2 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
data1 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
data_p4 = np.array(data3)
data_p3 = np.array(data3)
data_p2 = np.array(data2)
data_p1 = np.array(data1)
x = 0
i = 0
phase4 = 0
phase3 = 0
phase2 = 0
phase1 = 0
number = 0
#-----------------Цикл для определения количества фидеров и их типов, а также индексации их начальных элементов------
for x in range(327):
    if (frame.phase[x] != 'temp') & (frame.phase[x + 1] != 'temp') & (frame.phase[x + 2] != 'temp') & (frame.phase[x + 3] != 'temp'):
        phase4 += 1
        data_p4[phase4 - 1] = x
    if (frame.phase[x] == 'temp') & (frame.phase[x + 1] != 'temp') & (frame.phase[x + 2] != 'temp') & (frame.phase[x + 3] != 'temp') & (frame.phase[x + 4] == 'temp'):
        phase3 += 1
        data_p3[phase3 - 1] = x + 1
    if (frame.phase[x] == 'temp') & (frame.phase[x + 1] != 'temp') & (frame.phase[x + 2] != 'temp') & (frame.phase[x + 3] == 'temp'):
        phase2 += 1
        data_p2[phase2 - 1] = x + 1
    if (frame.phase[x] == 'temp') & (frame.phase[x + 1] != 'temp') & (frame.phase[x + 2] == 'temp'):
        phase1 += 1
        data_p1[phase1- 1] = x + 1
print('Четырехфазные -  ' + str(phase4)) 
print('Трехфазные -  ' + str(phase3))    
print('Двухфазные -  ' + str(phase2)) 
print('Однофазные -  ' + str(phase1))
print(data_p1)


#--------Обработка однофазных линий------------------
def function1f(munber1f):
    
    j = munber1f
    x = [1.21112]
    x2 = ['s1,12121212']
    x3 = ['s1,12121212']
    x4 = ['s1,12121212']
    x5 = ['s1,12121212']
    x6 = ['s1,12121212']
    Plist = np.array(x)                                 #Промежуточный массив для текущих мощностей
    SNlist = np.array(x2)                               #Промежуточный массив для наименований секций
    CABlist = np.array(x3)                              #Промежуточный массив для наименований кабеля
    NOM_CURlist = np.array(x4)                          #Промежуточный массив для номинальных токов
    START_CURlist = np.array(x5)                        #Промежуточный массив для стартовых токов
    PHASElist = np.array(x6)   


    data_1f = frame.data[j].split() #тут из строки делаем список символов, некоторые из которых и есть наши значения
    CABlist = frame.cable[j]
    SNlist = frame.section[j]
    Plist = data_1f[0]
    Pcomm = Plist 
    NOM_CURlist = data_1f[2]
    START_CURlist = data_1f[4]
    PHASElist = frame.phase[j]
    frame_FIDR = pd.read_csv('face.csv', sep=';') #импорт шаблонного файла
    frame_FIDR.drop([0,1,2,3,4,5,6], axis=0, inplace=True)

    newline_SN = {'1':SNlist}
    newline_CAB = {'1':CABlist}
    newline_P = {'1':Plist}
    newline_Pcomm = {'1':Pcomm}
    newline_NOM_CUR = {'1':NOM_CURlist}
    newline_START_CUR = {'1':START_CURlist}
    newline_PHASE = {'1':PHASElist}

    frame_FIDR = frame_FIDR.append(newline_SN, ignore_index = True)
    frame_FIDR = frame_FIDR.append(newline_CAB, ignore_index = True)
    frame_FIDR = frame_FIDR.append(newline_P, ignore_index = True)
    frame_FIDR = frame_FIDR.append(newline_Pcomm, ignore_index = True)
    frame_FIDR = frame_FIDR.append(newline_NOM_CUR, ignore_index = True)
    frame_FIDR = frame_FIDR.append(newline_START_CUR, ignore_index = True)
    frame_FIDR = frame_FIDR.append(newline_PHASE, ignore_index = True)
    
    return frame_FIDR

#--------Обработка двухфазных линий------------------
def function2f(munber2f):
    
    j = munber2f
    x = ['s1,12121212', 's1,12121212']
    SN1list = ['свсвсвс']
    SN2list = ['свсвсвс']
    x3 = ['s1,12121212', 's2,12121212']
    x4 = ['s1,12121212', 's2,12121212']
    x5 = ['s1,12121212', 's2,12121212']
    x6 = ['s1,12121212', 's2,12121212']
    Plist = np.array(x)                                 #Промежуточный массив для текущих мощностей
                   
    CABlist = np.array(x3)                              #Промежуточный массив для наименований кабеля
    NOM_CURlist = np.array(x4)                          #Промежуточный массив для номинальных токов
    START_CURlist = np.array(x5)                        #Промежуточный массив для стартовых токов
    PHASElist = np.array(x6)                            #Промежуточный массив для фазности

    data_2f_1 = frame.data[j].split() #тут из строки делаем список символов, некоторые из которых и есть наши значения

    SN1list = frame.section[j]
    CABlist[0] = frame.cable[j].encode('cp1251')
    Plist[0] = data_2f_1[0]
    Pcomm = frame.pcom[j] 
    NOM_CURlist[0] = data_2f_1[2]
    START_CURlist[0] = data_2f_1[4]
    PHASElist[0] = frame.phase[j]


    data_2f_2 = frame.data[j + 1].split() #тут из строки делаем список символов, некоторые из которых и есть наши значения
    SN2list = frame.section[j + 1]
    CABlist[1] = frame.cable[j + 1].encode('cp1251')
    Plist[1] = data_2f_2[0]

    NOM_CURlist[1] = data_2f_2[2]
    START_CURlist[1] = data_2f_2[4]
    PHASElist[1] = frame.phase[j + 1]
    
    
    
    frame_FIDR = pd.read_csv('face.csv', sep=';') #импорт шаблонного файла
    frame_FIDR.drop([0,1,2,3,4,5,6], axis=0, inplace=True)

    newline_SN = {'1':SN1list,'2': SN2list}
    newline_CAB = {'1':CABlist[0],'2': CABlist[1]}
    newline_P = {'1':Plist[0],'2': Plist[1]}
    newline_Pcomm = {'1':Pcomm}
    newline_NOM_CUR = {'1':NOM_CURlist[0],'2': NOM_CURlist[1]}
    newline_START_CUR = {'1':START_CURlist[0],'2': START_CURlist[1]}
    newline_PHASE = {'1':PHASElist[0],'2': PHASElist[1]}

    frame_FIDR = frame_FIDR.append(newline_SN, ignore_index = True)
    frame_FIDR = frame_FIDR.append(newline_CAB, ignore_index = True)
    frame_FIDR = frame_FIDR.append(newline_P, ignore_index = True)
    frame_FIDR = frame_FIDR.append(newline_Pcomm, ignore_index = True)
    frame_FIDR = frame_FIDR.append(newline_NOM_CUR, ignore_index = True)
    frame_FIDR = frame_FIDR.append(newline_START_CUR, ignore_index = True)
    frame_FIDR = frame_FIDR.append(newline_PHASE, ignore_index = True)
    
    return frame_FIDR

#--------Обработка трехфазных линий------------------
def function3f(munber3f):

    j = munber3f
    x = ['s1,12121212', 's1,12121212', 's1,12121212']
    SN1list = ['свсвсвс']
    SN2list = ['свсвсвс']
    SN3list = ['свсвсвс']
    x3 = ['s1,12121212', 's2,12121212', 's3,12121212']
    x4 = ['s1,12121212', 's2,12121212', 's3,12121212']
    x5 = ['s1,12121212', 's2,12121212', 's3,12121212']
    x6 = ['s1,12121212', 's2,12121212', 's3,12121212']
    Plist = np.array(x)                                 #Промежуточный массив для текущих мощностей
    #SNlist = np.array(x2)                               #Промежуточный массив для наименований секций
    CABlist = np.array(x3)                              #Промежуточный массив для наименований кабеля
    NOM_CURlist = np.array(x4)                          #Промежуточный массив для номинальных токов
    START_CURlist = np.array(x5)                        #Промежуточный массив для стартовых токов
    PHASElist = np.array(x6)                            #Промежуточный массив для фазности

    data_3f_1 = frame.data[j].split() #тут из строки делаем список символов, некоторые из которых и есть наши значения

    SN1list = frame.section[j]            #заполнение промежуточных массивов данными
    CABlist[0] = frame.cable[j].encode('cp1251')
    Plist[0] = data_3f_1[0]
    Pcomm = frame.pcom[j] 
    NOM_CURlist[0] = data_3f_1[2]
    START_CURlist[0] = data_3f_1[4]
    PHASElist[0] = frame.phase[j]


    data_3f_2 = frame.data[j + 1].split() #тут из строки делаем список символов, некоторые из которых и есть наши значения
    SN2list = frame.section[j + 1]
    #SNlist[1] = frame.section[j + 1].encode('cp1251')
    CABlist[1] = frame.cable[j + 1].encode('cp1251')
    Plist[1] = data_3f_2[0]

    NOM_CURlist[1] = data_3f_2[2]
    START_CURlist[1] = data_3f_2[4]
    PHASElist[1] = frame.phase[j + 1]

    data_3f_3 = frame.data[j + 2].split() #тут из строки делаем список символов, некоторые из которых и есть наши значения
    #SNlist[2] = frame.section[j + 2].encode('cp1251')
    SN3list = frame.section[j + 2]
    CABlist[2] = frame.cable[j + 2].encode('cp1251')
    Plist[2] = data_3f_3[0]

    NOM_CURlist[2] = data_3f_3[2]
    START_CURlist[2] = data_3f_3[4]
    PHASElist[2] = frame.phase[j + 2]
    
    frame_FIDR = pd.read_csv('face.csv', sep=';') #импорт шаблонного файла
    frame_FIDR.drop([0,1,2,3,4,5,6], axis=0, inplace=True)

    newline_SN = {'1':SN1list,'2': SN2list,'3': SN3list }
    newline_CAB = {'1':CABlist[0],'2': CABlist[1],'3':CABlist[2] }
    newline_P = {'1':Plist[0],'2': Plist[1],'3': Plist[2] }
    newline_Pcomm = {'1':Pcomm}
    newline_NOM_CUR = {'1':NOM_CURlist[0],'2': NOM_CURlist[1],'3': NOM_CURlist[2] }
    newline_START_CUR = {'1':START_CURlist[0],'2': START_CURlist[1],'3': START_CURlist[2] }
    newline_PHASE = {'1':PHASElist[0],'2': PHASElist[1],'3': PHASElist[2] }

    frame_FIDR = frame_FIDR.append(newline_SN, ignore_index = True)
    frame_FIDR = frame_FIDR.append(newline_CAB, ignore_index = True)
    frame_FIDR = frame_FIDR.append(newline_P, ignore_index = True)
    frame_FIDR = frame_FIDR.append(newline_Pcomm, ignore_index = True)
    frame_FIDR = frame_FIDR.append(newline_NOM_CUR, ignore_index = True)
    frame_FIDR = frame_FIDR.append(newline_START_CUR, ignore_index = True)
    frame_FIDR = frame_FIDR.append(newline_PHASE, ignore_index = True)                                  
    return frame_FIDR

#--------Обработка четырехфахных линий------------------
def function4f(munber4f):
    
    j = munber4f
    x = ['s1,12121212', 's1,12121212', 's1,12121212', 's1,12121212']
    SN1list = ['свсвсвс']
    SN2list = ['свсвсвс']
    SN3list = ['свсвсвс']
    SN4list = ['свсвсвс']
    x3 = ['s1,12121212', 's2,12121212', 's3,12121212', 's1,12121212']
    x4 = ['s1,12121212', 's2,12121212', 's3,12121212', 's1,12121212']
    x5 = ['s1,12121212', 's2,12121212', 's3,12121212', 's1,12121212']
    x6 = ['s1,12121212', 's2,12121212', 's3,12121212', 's1,12121212']
    Plist = np.array(x)                                 #Промежуточный массив для текущих мощностей
    #SNlist = np.array(x2)                               #Промежуточный массив для наименований секций
    CABlist = np.array(x3)                              #Промежуточный массив для наименований кабеля
    NOM_CURlist = np.array(x4)                          #Промежуточный массив для номинальных токов
    START_CURlist = np.array(x5)                        #Промежуточный массив для стартовых токов
    PHASElist = np.array(x6)                            #Промежуточный массив для фазности

    data_4f_1 = frame.data[j].split() #тут из строки делаем список символов, некоторые из которых и есть наши значения

    SN1list = frame.section[j]            #заполнение промежуточных массивов данными
    CABlist[0] = frame.cable[j].encode('cp1251')
    Plist[0] = data_4f_1[0]
    Pcomm = frame.pcom[j] 
    NOM_CURlist[0] = data_4f_1[2]
    START_CURlist[0] = data_4f_1[4]
    PHASElist[0] = frame.phase[j]


    data_4f_2 = frame.data[j + 1].split() #тут из строки делаем список символов, некоторые из которых и есть наши значения
    SN2list = frame.section[j + 1]
    CABlist[1] = frame.cable[j + 1].encode('cp1251')
    Plist[1] = data_4f_2[0]
    NOM_CURlist[1] = data_4f_2[2]
    START_CURlist[1] = data_4f_2[4]
    PHASElist[1] = frame.phase[j + 1]

    data_4f_3 = frame.data[j + 2].split() #тут из строки делаем список символов, некоторые из которых и есть наши значения
    SN3list = frame.section[j + 2]
    CABlist[2] = frame.cable[j + 2].encode('cp1251')
    Plist[2] = data_4f_3[0]
    NOM_CURlist[2] = data_4f_3[2]
    START_CURlist[2] = data_4f_3[4]
    PHASElist[2] = frame.phase[j + 2]
   
    data_4f_4 = frame.data[j + 3].split() #тут из строки делаем список символов, некоторые из которых и есть наши значения
    SN4list = frame.section[j + 3]
    CABlist[3] = frame.cable[j + 3].encode('cp1251')
    Plist[3] = data_4f_4[0]
    NOM_CURlist[3] = data_4f_4[2]
    START_CURlist[3] = data_4f_4[4]
    PHASElist[3] = frame.phase[j + 3]
    
    frame_FIDR = pd.read_csv('face.csv', sep=';') #импорт шаблонного файла
    frame_FIDR.drop([0,1,2,3,4,5,6], axis=0, inplace=True)

    newline_SN = {'1':SN1list,'2': SN2list,'3': SN3list,'4': SN4list }
    newline_CAB = {'1':CABlist[0],'2': CABlist[1],'3':CABlist[2],'4':CABlist[3] }
    newline_P = {'1':Plist[0],'2': Plist[1],'3': Plist[2],'4': Plist[3] }
    newline_Pcomm = {'1':Pcomm}
    newline_NOM_CUR = {'1':NOM_CURlist[0],'2': NOM_CURlist[1],'3': NOM_CURlist[2],'4': NOM_CURlist[3] }
    newline_START_CUR = {'1':START_CURlist[0],'2': START_CURlist[1],'3': START_CURlist[2],'4': START_CURlist[3] }
    newline_PHASE = {'1':PHASElist[0],'2': PHASElist[1],'3': PHASElist[2],'4': PHASElist[3] }

    frame_FIDR = frame_FIDR.append(newline_SN, ignore_index = True)
    frame_FIDR = frame_FIDR.append(newline_CAB, ignore_index = True)
    frame_FIDR = frame_FIDR.append(newline_P, ignore_index = True)
    frame_FIDR = frame_FIDR.append(newline_Pcomm, ignore_index = True)
    frame_FIDR = frame_FIDR.append(newline_NOM_CUR, ignore_index = True)
    frame_FIDR = frame_FIDR.append(newline_START_CUR, ignore_index = True)
    frame_FIDR = frame_FIDR.append(newline_PHASE, ignore_index = True)                                  
    return frame_FIDR
    
    
   #---------------------------------создание четырехфазных таблиц------------------
frame_FIDR = pd.read_csv('face.csv', sep=';') #импорт шаблонного файла
frame_FIDR.drop([0,1,2,3,4,5,6], axis=0, inplace=True)
phase4_counter = 0
data_frames_4f = frame_FIDR
if phase4 == 1:
    data_frames_4f = function4f(data_p4[0])
else:
    while phase4_counter < phase4:
        frame_FIDR = function4f(data_p4[phase4_counter])
        data_frames_4f = pd.concat([data_frames_4f, frame_FIDR], axis=1)
        phase4_counter +=1

#---------------------------------создание трёхфазных таблиц------------------
frame_FIDR = pd.read_csv('face.csv', sep=';') #импорт шаблонного файла
frame_FIDR.drop([0,1,2,3,4,5,6], axis=0, inplace=True)
phase3_counter = 0
data_frames_3f = frame_FIDR

while phase3_counter < phase3:
    frame_FIDR = function3f(data_p3[phase3_counter])
    data_frames_3f = pd.concat([data_frames_3f, frame_FIDR], axis=1)
    phase3_counter +=1
#---------------------------------создание двухфазных таблиц------------------
frame_FIDR = pd.read_csv('face.csv', sep=';') #импорт шаблонного файла
frame_FIDR.drop([0,1,2,3,4,5,6], axis=0, inplace=True)
phase2_counter = 0
data_frames_2f = frame_FIDR

while phase2_counter < phase2:
    frame_FIDR = function2f(data_p2[phase2_counter])
    data_frames_2f = pd.concat([data_frames_2f, frame_FIDR], axis=1)
    phase2_counter +=1
#---------------------------------создание однофазных таблиц------------------
frame_FIDR = pd.read_csv('face.csv', sep=';') #импорт шаблонного файла
frame_FIDR.drop([0,1,2,3,4,5,6], axis=0, inplace=True)
phase1_counter = 0
data_frames_1f = frame_FIDR

while phase1_counter < phase1:
    frame_FIDR = function1f(data_p1[phase1_counter])
    data_frames_1f = pd.concat([data_frames_1f, frame_FIDR], axis=1)
    phase1_counter +=1    
    
  frame_FIDR = pd.concat([data_frames_4f, data_frames_3f, data_frames_2f, data_frames_1f], axis=1)
  frame_FIDR.to_excel('updDATA.xls', header=False, index=None)
  
